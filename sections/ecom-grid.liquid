<section class="py-24 px-10">
  <h2 class="text-black font-lustria font-normal text-2xl sm:text-3xl md:text-4xl lg:text-5xl px-5 w-full text-center sm:text-left">
    {{ section.settings.section_title }}
  </h2>

  <div class="grid grid-cols-3 gap-4 p-4">
    {% for block in section.blocks %}
      {% assign product = block.settings.product %}
      {% assign popup_id = 'popup-' | append: forloop.index %}

      <div class="relative h-auto flex items-center justify-center">
        <!-- Product Image -->
        <img
          src="{{ product.featured_image | img_url: 'large' }}"
          alt="{{ product.title }}"
          class="object-cover h-full w-full"
        >

        <!-- Plus Icon -->
        <div class="absolute inset-0 flex items-center justify-center">
          <button
            class="bg-[#F8F8F8] flex items-center justify-center text-black rounded-full w-6 h-6 plus-icon"
            data-popup-id="{{ popup_id }}"
            data-product-id="{{ product.id }}"
          >
            <i class="fas fa-plus text-xl"></i>
          </button>
        </div>
      </div>

      <!-- Popup -->
      <div
        id="{{ popup_id }}"
        class="popup-overlay hidden fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50"
        data-variants="{{ product.variants | json | escape }}"
      >
        <div class="relative w-[20.438rem] h-fit bg-white border rounded-lg shadow-md overflow-hidden m-auto">
          <!-- Close Icon -->
          <button
            class="absolute top-2 right-5 text-black hover:text-gray-800 focus:outline-none close-popup"
            data-popup-id="{{ popup_id }}"
          >
            <i class="fas fa-times"></i>
          </button>

          <!-- Product Image and Details -->
          <div class="flex pt-9">
            <div class="w-1/2 p-4">
              <img
                id="popup-image-{{ forloop.index }}"
                src="{{ product.featured_image | img_url: 'large' }}"
                alt="{{ product.title }}"
                class="w-[7.5rem] h-[8.75rem] object-cover"
              >
            </div>

            <div class="w-1/2 p-4 flex flex-col justify-between">
              <div>
                <h2 id="popup-title-{{ forloop.index }}" class="text-base font-jost font-light mb-2 text-black">
                  {{ product.title }}
                </h2>
                <p id="popup-price-{{ forloop.index }}" class="font-lustria font-normal text-base text-black mb-2">
                  {{ product.price | money }}
                </p>
                <p
                  id="popup-description-{{ forloop.index }}"
                  class="font-jost font-light text-sm text-black mb-4 truncate"
                >
                  {{ product.description | truncate: 25 }}
                </p>
              </div>
            </div>
          </div>

          <!-- Variant Options -->
          <div class="px-4 pb-4">
            {% if product.options.size > 1 and product.options contains 'Color' %}
              <h2 class="font-jost font-normal text-sm">Color</h2>
              <div class="flex mb-4">
                {% assign color_options = '' %}
                {% for variant in product.variants %}
                  {% unless color_options contains variant.option2 %}
                    {% assign color_options = color_options | append: variant.option2 %}
                    <button
                      class="color-button flex w-full border border-black text-sm text-black hover:bg-black hover:text-white focus:outline-none"
                      data-variant-color="{{ variant.option2 }}"
                      data-variant-id="{{ variant.id }}"
                      data-popup-id="{{ popup_id }}"
                    >
                      <span class="w-2 h-full variant-color" style="background-color: {{ variant.option2 }}"></span>
                      <span class="flex py-2 pl-1 justify-start font-jost font-normal text-lg">
                        {{ variant.option2 }}
                      </span>
                    </button>
                  {% endunless %}
                {% endfor %}
              </div>
            {% endif %}

            {% if product.options.size > 1 and product.options contains 'Size' %}
              <h2 class="font-jost font-normal text-sm">Size</h2>
              <div class="relative w-full">
                <select
                  id="popup-size-select-{{ forloop.index }}"
                  class="size-select w-full appearance-none border border-black p-2 pr-12 font-jost font-normal text-base text-black"
                  data-popup-id="{{ popup_id }}"
                >
                  <option value="" disabled selected>Choose your size</option>
                  {% assign size_options = '' %}
                  {% for variant in product.variants %}
                    {% unless size_options contains variant.option1 %}
                      {% assign size_options = size_options | append: variant.option1 %}
                      <option value="{{ variant.id }}" data-size="{{ variant.option1 }}">
                        {{ variant.option1 }}
                      </option>
                    {% endunless %}
                  {% endfor %}
                </select>
              </div>
            {% endif %}
          </div>

          <!-- Add to Cart Button -->
          <div class="px-4 pb-4">
            <button
              id="popup-add-to-cart-{{ forloop.index }}"
              class="add-to-cart-button bg-black text-white font-jost font-normal mt-4 py-2 px-4 w-full hover:bg-black hover:text-white"
              data-popup-id="{{ popup_id }}"
              disabled
            >
              Add to Cart
              <i class="fas fa-arrow-right ml-2"></i>
            </button>
          </div>
        </div>
      </div>
    {% endfor %}
  </div>
</section>

<!-- JavaScript for Popup & Variant Management -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    let selectedColor = null;
    let selectedSize = null;
    let selectedVariantId = null;

    // Function to open a popup
    function openPopup(popupId) {
      const popup = document.getElementById(popupId);
      if (popup) {
        popup.classList.remove('hidden');
        console.log(Opened popup with ID ${popupId});
      } else {
        console.error(Popup with ID ${popupId} not found.);
      }
    }

    // Function to close a popup
    function closePopup(popup) {
      if (popup) {
        popup.classList.add('hidden');
        resetSelections(popup);
      } else {
        console.error('Popup not found for close button.');
      }
    }

    // Function to reset selections
    function resetSelections(popup) {
      if (!popup) {
        console.error('Popup is null in resetSelections.');
        return;
      }

      selectedColor = null;
      selectedSize = null;
      selectedVariantId = null;

      // Reset color buttons
      const colorButtons = popup.querySelectorAll('.color-button');
      colorButtons.forEach((btn) => {
        btn.classList.remove('bg-black', 'text-white');
        btn.classList.add('text-black');
      });

      // Reset size selection
      const sizeSelect = popup.querySelector('.size-select');
      if (sizeSelect) {
        sizeSelect.value = '';
        sizeSelect.disabled = true;
      }

      // Disable add to cart button
      const addToCartButton = popup.querySelector('.add-to-cart-button');
      if (addToCartButton) {
        addToCartButton.disabled = true;
      }
    }

    // Function to handle color selection
    function handleColorSelection(colorButton) {
      const color = colorButton.getAttribute('data-variant-color');
      const popupId = colorButton.getAttribute('data-popup-id');

      if (!popupId) {
        console.error('data-popup-id is null or undefined.');
        return;
      }

      const popup = document.getElementById(popupId);
      if (popup) {
        if (selectedColor !== color) {
          selectedColor = color;
          selectedSize = null; // Reset size when color changes
          selectedVariantId = null;

          // Reset and enable size selection for the selected color
          const sizeSelect = popup.querySelector('.size-select');
          if (sizeSelect) {
            sizeSelect.disabled = false;
            sizeSelect.value = ''; // Reset to default value

            // Filter the sizes based on the selected color
            const variants = JSON.parse(popup.getAttribute('data-variants'));
            sizeSelect.querySelectorAll('option').forEach((option) => {
              const size = option.getAttribute('data-size');
              const matchingVariant = variants.find((variant) => variant.option1 === size && variant.option2 === color);
              option.disabled = !matchingVariant;
            });
          }

          // Update button styles
          popup.querySelectorAll('.color-button').forEach((btn) => {
            btn.classList.remove('bg-black', 'text-white');
            btn.classList.add('text-black');
          });
          colorButton.classList.add('bg-black', 'text-white');
        }
      } else {
        console.error(Popup with ID ${popupId} not found.);
      }
    }

    // Function to handle size selection
    function handleSizeSelection(sizeSelect) {
      const selectedOption = sizeSelect.options[sizeSelect.selectedIndex];
      selectedSize = selectedOption.getAttribute('data-size');
      const popupId = sizeSelect.getAttribute('data-popup-id');

      if (!popupId) {
        console.error('data-popup-id is null or undefined.');
        return;
      }

      const popup = document.getElementById(popupId);
      if (popup) {
        selectedVariantId = getVariantId(selectedColor, selectedSize, popup);

        // Enable the Add to Cart button if both color and size are selected
        const addToCartButton = popup.querySelector('.add-to-cart-button');
        if (selectedColor && selectedSize && selectedVariantId) {
          addToCartButton.disabled = false;
          addToCartButton.setAttribute('data-variant-id', selectedVariantId);
          addToCartButton.setAttribute('data-variant-size', selectedSize);
          addToCartButton.setAttribute('data-variant-color', selectedColor);
        }
      } else {
        console.error(Popup with ID ${popupId} not found.);
      }
    }

    // Function to get variant ID based on color and size
    function getVariantId(color, size, popup) {
      const variantsString = popup.getAttribute('data-variants');
      let variants;

      try {
        variants = JSON.parse(variantsString);
      } catch (e) {
        console.error('Invalid JSON:', e);
        return null;
      }

      const variant = variants.find((v) => v.option2 === color && v.option1 === size);
      return variant ? variant.id : null;
    }

    // Function to initialize event listeners
    function initialize() {
      // Open popup event
      document.querySelectorAll('.plus-icon').forEach((icon) => {
        icon.addEventListener('click', function () {
          const popupId = this.getAttribute('data-popup-id');
          console.log(Clicked plus icon with data-popup-id ${popupId});
          openPopup(popupId);
        });
      });

      // Close popup event
      document.querySelectorAll('.close-popup').forEach((closeButton) => {
        closeButton.addEventListener('click', function () {
          const popup = this.closest('.popup-overlay');
          closePopup(popup);
        });
      });

      // Color button events
      document.querySelectorAll('.color-button').forEach((colorButton) => {
        colorButton.addEventListener('click', function () {
          handleColorSelection(colorButton);
        });
      });

      // Size select events
      document.querySelectorAll('.size-select').forEach((sizeSelect) => {
        sizeSelect.addEventListener('change', function () {
          handleSizeSelection(sizeSelect);
        });
      });

      // Add to cart button events
      document.querySelectorAll('.add-to-cart-button').forEach((addButton) => {
        addButton.addEventListener('click', function () {
          const variantId = this.getAttribute('data-variant-id');
          const variantSize = this.getAttribute('data-variant-size');
          const variantColor = this.getAttribute('data-variant-color');
          const popupId = this.getAttribute('data-popup-id');

          if (!variantId || !variantSize || !variantColor || !popupId) {
            console.error('Cannot add to cart: missing variant or popup information.');
            return;
          }

          fetch('/cart.js')
            .then((response) => response.json())
            .then((cart) => {
              const existingItem = cart.items.find((item) => item.id === parseInt(variantId, 10));
              if (!existingItem) {
                // Add to cart if the item is not already in the cart
                return fetch('/cart/add.js', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    id: variantId,
                    quantity: 1,
                    properties: {
                      Size: variantSize,
                      Color: variantColor,
                    },
                  }),
                });
              } else {
                console.warn('Item is already in the cart.');
              }
            })
            .then((response) => response.json())
            .then((data) => {
              const popup = document.getElementById(popupId);
              if (popup) {
                resetSelections(popup);
                popup.classList.add('hidden');
              } else {
                console.error(Popup with ID ${popupId} not found.);
              }
              console.log('Product added to cart');
              alert('Product added to cart!');
            })
            .catch((error) => {
              console.error('Error adding to cart:', error);
            });
        });
      });
    }

    initialize();
  });
</script>

{% schema %}
{
  "name": "Product Grid with Popup",
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Tisso vision in the wild"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product Block",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        }
      ]
    }
  ],

  "presets": [
    {
      "name": "Product Grid with Popup",
      "category": "Custom"
    }
  ]
}
{% endschema %}
