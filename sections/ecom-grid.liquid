<section class="py-24 px-10">
  <h2 class="text-black font-lustria font-normal text-2xl sm:text-3xl md:text-4xl lg:text-5xl px-5 w-full text-center sm:text-left">
    {{ section.settings.section_title }}
  </h2>

  <div class="grid grid-cols-3 gap-4 p-4">
    {% for block in section.blocks %}
      {% assign product = block.settings.product %}

      <div class="relative h-auto flex items-center justify-center">
        <!-- Product Image -->
        <img
          src="{{ product.featured_image | img_url: 'large' }}"
          alt="{{ product.title }}"
          class="object-cover h-full w-full"
        >

        <!-- Plus Icon -->
        <div class="absolute inset-1 flex items-center justify-center">
          <button
            class="bg-[#F8F8F8] flex items-center justify-center text-black rounded-full w-6 h-6 plus-icon"
            data-popup-id="popup-{{ forloop.index }}"
          >
            <i class="fas fa-plus text-xl"></i>
          </button>
        </div>
      </div>

      <!-- Popup code start -->
      <div
        id="popup-{{ forloop.index }}"
        class="popup-overlay hidden fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50"
      >
        <div class="relative w-[20.438rem] h-fit bg-white border rounded-lg shadow-md overflow-hidden m-auto">
          <!-- Close Icon -->
          <button class="absolute top-2 right-5 text-black hover:text-gray-800 focus:outline-none close-popup">
            <i class="fas fa-times"></i>
          </button>

          <!-- Product Image and Details -->
          <div class="flex pt-9">
            <!-- Product Image -->
            <div class="w-1/2 p-4">
              <img
                src="{{ product.featured_image | img_url: 'large' }}"
                alt="{{ product.title }}"
                class="w-[7.5rem] h-[8.75rem] object-cover"
              >
            </div>

            <!-- Product Details -->
            <div class="w-1/2 p-4 flex flex-col justify-between">
              <div>
                <!-- Product Name -->
                <h2 class="text-base font-jost font-light mb-2 text-black">{{ product.title }}</h2>

                <!-- Product Price -->
                <p class="font-lustria font-normal text-base text-black mb-2">{{ product.price | money }}</p>

                <!-- Product Description -->
                <p class="font-jost font-light text-sm text-black mb-4 truncate">
                  {{ product.description | truncate: 25 }}
                </p>
              </div>
            </div>
          </div>

          <!-- Variants and Size Selection -->
          <div class="px-4 pb-4">
            {% if product.options.size > 1 and product.options contains 'Color' %}
              <h2 class="font-jost font-normal text-sm">Color</h2>
              <div class="flex mb-4">
                {% assign color_options = '' %}
                {% for variant in product.variants %}
                  {% unless color_options contains variant.option2 %}
                    {% assign color_options = color_options | append: variant.option2 %}
                    <button
                      class="flex w-full border border-black text-sm text-black hover:bg-black hover:text-white focus:outline-none color-button"
                      data-variant-id="{{ variant.id }}"
                      data-variant-color="{{ variant.option2 }}"
                    >
                      <span class="w-2 h-full variant-color" style="background-color: {{ variant.option2 }}"></span>
                      <span class="flex py-2 pl-1 justify-start font-jost font-normal text-lg">
                        {{- variant.option2 -}}
                      </span>
                    </button>
                  {% endunless %}
                {% endfor %}
              </div>
            {% endif %}

            {% if product.options.size > 1 and product.options contains 'Size' %}
              <h2 class="font-jost font-normal text-sm">Size</h2>
              <div class="relative w-full">
                <select
                  class="w-full appearance-none border border-black p-2 pr-12 font-jost font-normal text-base text-black size-select"
                >
                  <!-- Default option -->
                  <option value="" disabled selected>Choose your size</option>

                  <!-- Dynamic options -->
                  {% assign size_options = '' %}
                  {% for variant in product.variants %}
                    {% unless size_options contains variant.option1 %}
                      {% assign size_options = size_options | append: variant.option1 %}
                      <option value="{{ variant.id }}" class="text-center">
                        {{ variant.option1 }}
                      </option>
                    {% endunless %}
                  {% endfor %}
                </select>
              </div>
            {% endif %}
          </div>

          <!-- Add to Cart Button -->
          <div class="px-4 pb-4">
            <button class="bg-black text-white font-jost font-normal mt-4 py-2 px-4 w-full hover:bg-black hover:text-white add-to-cart-button">
              Add to Cart
              <i class="fas fa-arrow-right ml-2"></i>
            </button>
          </div>
        </div>
      </div>
      <!-- Popup code end -->
    {% endfor %}
  </div>
</section>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    let selectedColor = '';
    let selectedSizeId = '';

    // Show popup when plus icon is clicked
    document.querySelectorAll('.plus-icon').forEach(function (icon) {
      icon.addEventListener('click', function () {
        const popupId = icon.getAttribute('data-popup-id');
        const popup = document.getElementById(popupId);
        if (popup) {
          popup.classList.remove('hidden');
        }
      });
    });

    // Hide popup when close icon is clicked
    document.querySelectorAll('.close-popup').forEach(function (button) {
      button.addEventListener('click', function () {
        const popupOverlay = button.closest('.popup-overlay');
        if (popupOverlay) {
          popupOverlay.classList.add('hidden');
        }
      });
    });

    // Handle color variant selection
    document.querySelectorAll('.color-button').forEach(function (button) {
      button.addEventListener('click', function () {
        selectedColor = button.getAttribute('data-variant-color');
        document.querySelectorAll('.color-button').forEach(function (btn) {
          if (btn.getAttribute('data-variant-color') === selectedColor) {
            btn.classList.add('bg-black', 'text-white');
            btn.classList.remove('bg-white', 'text-black');
          } else {
            btn.classList.add('bg-white', 'text-black');
            btn.classList.remove('bg-black', 'text-white');
          }
        });
        console.log('Selected Color:', selectedColor); // Debugging line
      });
    });

    // Handle size selection
    document.querySelectorAll('.size-select').forEach(function (select) {
      select.addEventListener('change', function () {
        selectedSizeId = select.value;
        console.log('Selected Size ID:', selectedSizeId); // Debugging line
      });
    });

    // Create a map of variant IDs based on color and size
    const variantMap = {};
    document.querySelectorAll('.color-button').forEach(function (button) {
      const color = button.getAttribute('data-variant-color');
      const variantId = button.getAttribute('data-variant-id');
      if (!variantMap[color]) {
        variantMap[color] = {};
      }
      // Store the variant ID in the map
      variantMap[color][variantId] = true;
    });

    // Handle Add to Cart button click
    document.querySelectorAll('.add-to-cart-button').forEach(function (button) {
      button.addEventListener('click', function () {
        if (selectedColor && selectedSizeId) {
          // Check the variant map for the selected color
          if (variantMap[selectedColor]) {
            // Find the correct variant ID based on selected color and size
            const variantId = Object.keys(variantMap[selectedColor]).find((id) => id === selectedSizeId);

            if (variantId) {
              fetch('/cart/add.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  Accept: 'application/json',
                },
                body: JSON.stringify({
                  items: [
                    {
                      id: variantId, // Use the correct variant ID
                      quantity: 1,
                    },
                  ],
                }),
              })
                .then((response) => response.json())
                .then((data) => {
                  console.log('Product added to cart:', data);
                  // Optionally update UI or redirect
                })
                .catch((error) => {
                  console.error('Error adding product to cart:', error);
                });
            } else {
              console.error('No matching variant found for the selected size:', selectedSizeId); // Debugging line
            }
          } else {
            console.error('No matching variant found for the selected color:', selectedColor); // Debugging line
          }
        } else {
          console.error('Color or size ID is missing');
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "Product Grid with Popup",
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Tisso vision in the wild"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product Block",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        }
      ]
    }
  ],

  "presets": [
    {
      "name": "Product Grid with Popup",
      "category": "Custom"
    }
  ]
}
{% endschema %}
